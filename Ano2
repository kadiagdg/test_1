# secure_folder/anonymize.py
import os
import json
import pandas as pd
from cryptography.fernet import Fernet
import hmac
import hashlib
from dotenv import load_dotenv, set_key, dotenv_values
from pathlib import Path

# Déterminer le répertoire de base
if "__file__" in globals():
    # Cas d'un fichier .py : utiliser __file__
    base_dir = Path(__file__).resolve().parent  # Remonter d'un niveau
else:
    # Cas de Jupyter Notebook : utiliser le répertoire de travail actuel
    base_dir = Path(os.getcwd())  # Utiliser le répertoire courant

# Chemin absolu vers le fichier .env
env_file = base_dir.parent / ".env"

# Chemin absolu vers le fichier de correspondance chiffré
mapping_file = base_dir / "mapping_tables_encrypted.json"

# Vérifier si le fichier .env existe
if not os.path.exists(env_file):
    # Créer un fichier .env vide
    with open(env_file, "w") as f:
        pass
    print("Fichier .env créé.")

# Charger les variables d'environnement
env_vars = dotenv_values(env_file)

# Vérifier si les clés existent dans .env
if "FERNET_KEY" not in env_vars or "HMAC_KEY" not in env_vars:
    # Générer une clé Fernet
    fernet_key = Fernet.generate_key().decode()  # Convertir en chaîne pour le stockage

    # Générer une clé HMAC
    hmac_key = os.urandom(32).hex()  # Générer 32 bytes aléatoires et convertir en hexadécimal

    # Enregistrer les clés dans .env
    set_key(env_file, "FERNET_KEY", fernet_key)
    set_key(env_file, "HMAC_KEY", hmac_key)

    print("Nouvelles clés générées et enregistrées dans .env.")
else:
    print("Les clés existent déjà dans .env.")

# Charger les variables d'environnement
load_dotenv(env_file)

# Récupérer les clés
fernet_key = os.getenv("FERNET_KEY").encode()  # Convertir en bytes pour Fernet
hmac_key = bytes.fromhex(os.getenv("HMAC_KEY"))  # Convertir en bytes pour HMAC

# Initialiser Fernet avec la clé
cipher_suite = Fernet(fernet_key)

# Fonction pour chiffrer un champ avec Fernet
def encrypt_symmetric(data):
    return cipher_suite.encrypt(data.encode()).decode()

# Fonction pour déchiffrer un champ avec Fernet
def decrypt_symmetric(data):
    return cipher_suite.decrypt(data.encode()).decode()

# Fonction pour hacher un champ avec HMAC
def anonymize_hash(data):
    hmac_hash = hmac.new(hmac_key, data.encode(), hashlib.sha256)
    return hmac_hash.hexdigest()[:10]  # Retourne les 10 premiers caractères du hachage

# Fonction pour anonymiser un DataFrame
def anonymize_dataframe(df):
    # Vérifier les colonnes nécessaires
    required_columns = ["nc", "id_cl", "nom_cl", "code_ag", "nom_ag"]
    if not all(column in df.columns for column in required_columns):
        raise ValueError(f"Le DataFrame doit contenir les colonnes suivantes : {required_columns}")

    # Créer des tables de correspondance pour les colonnes hachées
    mapping_tables = {
        "nc": {},
        "id_cl": {},
        "code_ag": {},
    }

    # Anonymisation des données
    df_anonymized = df.copy()

    # Hacher les colonnes nc, id_cl et code_ag
    for column in ["nc", "id_cl", "code_ag"]:
        df_anonymized[column] = df[column].apply(lambda x: mapping_tables[column].setdefault(x, anonymize_hash(x)))

    # Chiffrer les colonnes nom_cl et nom_ag
    df_anonymized["nom_cl"] = df["nom_cl"].apply(encrypt_symmetric)
    df_anonymized["nom_ag"] = df["nom_ag"].apply(encrypt_symmetric)

    # Sauvegarder les tables de correspondance dans un fichier chiffré
    try:
        with open(mapping_file, "wb") as f:
            encrypted_mapping = cipher_suite.encrypt(json.dumps(mapping_tables).encode())
            f.write(encrypted_mapping)
        print("Fichier de correspondance chiffré sauvegardé avec succès.")
    except Exception as e:
        print(f"Erreur lors de la sauvegarde du fichier de correspondance : {e}")
        raise

    return df_anonymized

# Fonction de désanonymisation encapsulée
def get_deanonymization_function():
    # Charger et déchiffrer les tables de correspondance
    try:
        with open(mapping_file, "rb") as f:
            encrypted_mapping = f.read()
            decrypted_mapping = cipher_suite.decrypt(encrypted_mapping).decode()
            mapping_tables = json.loads(decrypted_mapping)
        print("Fichier de correspondance chargé et déchiffré avec succès.")
    except Exception as e:
        print(f"Erreur lors du chargement ou du déchiffrement du fichier de correspondance : {e}")
        raise

    # Fonction interne pour désanonymiser un DataFrame
    def deanonymize_dataframe(df_anonymized):
        df_deanonymized = df_anonymized.copy()

        # Déchiffrer les colonnes nom_cl et nom_ag
        df_deanonymized["nom_cl"] = df_anonymized["nom_cl"].apply(decrypt_symmetric)
        df_deanonymized["nom_ag"] = df_anonymized["nom_ag"].apply(decrypt_symmetric)

        # Désanonymiser les colonnes nc, id_cl et code_ag
        for column in ["nc", "id_cl", "code_ag"]:
            reverse_mapping_table = {v: k for k, v in mapping_tables[column].items()}
            df_deanonymized[column] = df_anonymized[column].map(reverse_mapping_table)

        return df_deanonymized

    return deanonymize_dataframe

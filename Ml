import pandas as pd
from datetime import timedelta

# Paramètres
jours_fenetre = 15  # ou 30 si besoin

# Conversion des dates
df_solde['date'] = pd.to_datetime(df_solde['date'])
df_produits['date_ouverture'] = pd.to_datetime(df_produits['date_ouverture'])

# Date max pour arrêter la génération
max_date = df_solde['date'].max()

# Générer les dates d’anniversaire à la même date chaque mois
def generer_dates_anniversaire(row):
    dates = []
    date = row['date_ouverture'] + pd.DateOffset(months=1)  # on commence 1 mois après
    while date <= max_date:
        try:
            dates.append(date)
            date += pd.DateOffset(months=1)
        except:
            break  # en cas de problème (ex : 31 février)
    return pd.DataFrame({
        'id': row['id'],
        'date_anniversaire': dates,
        'montant_pack': row['montant_pack']
    })

# Appliquer à tous les produits
df_anniversaires = pd.concat([generer_dates_anniversaire(row) for _, row in df_produits.iterrows()], ignore_index=True)

# Vérifier le solde suffisant dans les 15 jours suivant chaque date anniversaire
results = []
for _, row in df_anniversaires.iterrows():
    id_client = row['id']
    date_debut = row['date_anniversaire']
    date_fin = date_debut + timedelta(days=jours_fenetre)

    # Chercher le solde du client pendant cette période
    sous_df = df_solde[
        (df_solde['id'] == id_client) &
        (df_solde['date'] >= date_debut) &
        (df_solde['date'] <= date_fin)
    ]

    est_suffisant = (sous_df['solde'] >= row['montant_pack']).any()

    results.append({
        'id': id_client,
        'date_anniversaire': date_debut,
        'solde_suffisant': est_suffisant
    })

# Résultat final
df_resultat = pd.DataFrame(results)

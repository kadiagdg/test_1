L'objectif est de traiter des fichiers SWIFT contenus dans deux dossiers : **MT103** et **MT910**. Ces dossiers contiennent des sous-dossiers organisés par dates, où se trouvent les fichiers au format PDF. Chaque fichier porte un nom qui inclut des informations importantes comme une référence unique, une date, un montant, une devise, etc.

### Étapes du traitement :

1. **Extraction des données :**
   - Parcourir les fichiers du dossier **MT103** et enregistrer leurs informations (comme le chemin du fichier, la date, la référence, le montant, la devise, etc.) dans une table appelée **MT103** dans une base de données PostgreSQL.
   - Faire de même avec les fichiers du dossier **MT910**, en enregistrant leurs informations dans une table appelée **MT910**.

2. **Comparaison des fichiers :**
   - Comparer les fichiers du dossier **MT103** avec ceux du dossier **MT910**, en utilisant la **référence unique** extraite des noms des fichiers.
   - Enregistrer le résultat de cette comparaison dans une table appelée **match**, qui contiendra :
     - La date de la comparaison.
     - La date des fichiers (extraite du nom).
     - Les références des fichiers (**MT103** et **MT910**).
     - Les chemins des fichiers.
     - Une indication si les références correspondent ("oui" si elles sont identiques, "non" sinon).

3. **Gestion des correspondances :**
   - Si un fichier de **MT103** a une correspondance dans **MT910** (même référence) pour la date du jour :
     - Copier les deux fichiers dans un répertoire spécifique appelé **dossiers_traiter**.
   - Si un fichier de **MT103** n'a pas de correspondance dans **MT910** pour la date du jour :
     - Vérifier dans les dossiers des jours suivants si une correspondance existe.
     - Si une correspondance est trouvée dans un jour ultérieur, traiter comme pour une correspondance classique (copier dans **dossiers_traiter**).
     - Si aucune correspondance n'est trouvée, laisser les fichiers dans leurs dossiers d'origine.

4. **Organisation quotidienne :**
   - Chaque jour, de nouveaux sous-dossiers sont créés dans les dossiers **MT103** et **MT910** pour les fichiers du jour (par exemple, pour le 10 décembre 2024, les sous-dossiers correspondants seront créés).

### Résumé des tables de la base de données :

- **Table MT103 :**  
  Contient des informations sur les fichiers du dossier MT103 :  
  - `url`, `moisannee`, `jjmmaaaa`, `dossier`, `sousdossier`, `reference103`, `montant`, `devise`, `emetteur`, `recepteur`, etc.  

- **Table MT910 :**  
  Contient des informations sur les fichiers du dossier MT910 :  
  - `url`, `moisannee`, `jjmmaaaa`, `reference910`, `montant`, `devise`, `emetteur`, `recepteur`, etc.  

- **Table match :**  
  Contient le résultat de la comparaison entre les fichiers MT103 et MT910 :  
  - `date_match` (date système de la comparaison), `jjmmaaaa`, `reference103`, `reference910`, `url103`, `url910`, `match` ("oui" ou "non").

Ce processus est automatisé avec un script Python, qui récupère les informations nécessaires, les enregistre dans les tables, effectue les comparaisons, et gère les fichiers en conséquence.


__________________________________
# Connexion à PostgreSQL
def create_database_and_tables():
    try:
        # Connexion à PostgreSQL (adapter les valeurs à votre configuration)
        conn = psycopg2.connect(
            dbname="postgres",  # La base initiale pour se connecter
            user="votre_utilisateur",
            password="votre_mot_de_passe",
            host="localhost",
            port="5432"
        )
        conn.autocommit = True
        cursor = conn.cursor()

        # Vérifier si la base de données existe déjà
        db_name = "ma_base_de_donnees"
        cursor.execute("SELECT 1 FROM pg_catalog.pg_database WHERE datname = %s", (db_name,))
        exists = cursor.fetchone()
        if not exists:
            # Création de la base de données
            cursor.execute(sql.SQL("CREATE DATABASE {}").format(sql.Identifier(db_name)))
            print(f"Base de données '{db_name}' créée avec succès.")
        else:
            print(f"La base de données '{db_name}' existe déjà.")
        
        # Connexion à la nouvelle base
        conn.close()
        conn = psycopg2.connect(
            dbname=db_name,
            user="votre_utilisateur",
            password="votre_mot_de_passe",
            host="localhost",
            port="5432"
        )
        cursor = conn.cursor()

        # Création des tables
        table_103_query = """
        CREATE TABLE IF NOT EXISTS table_103 (
            id SERIAL PRIMARY KEY,
            nom_fichier VARCHAR(255) NOT NULL,
            reference103 BIGINT NOT NULL,
            date_creation DATE NOT NULL,
            chemin_fichier TEXT NOT NULL,
            date_insertion TIMESTAMP DEFAULT NOW()
        );
        """
        table_910_query = """
        CREATE TABLE IF NOT EXISTS table_910 (
            id SERIAL PRIMARY KEY,
            nom_fichier VARCHAR(255) NOT NULL,
            reference910 BIGINT NOT NULL,
            date_creation DATE NOT NULL,
            chemin_fichier TEXT NOT NULL,
            date_insertion TIMESTAMP DEFAULT NOW()
        );
        """
        traitement_query = """
        CREATE TABLE IF NOT EXISTS traitement (
            id SERIAL PRIMARY KEY,
            reference103 INT REFERENCES table_103(id) ON DELETE CASCADE,
            reference910 INT REFERENCES table_910(id) ON DELETE CASCADE,
            statut VARCHAR(50) NOT NULL,
            date_traitement TIMESTAMP DEFAULT NOW()
        );
        """
        
        # Exécution des requêtes
        cursor.execute(table_103_query)
        cursor.execute(table_910_query)
        cursor.execute(traitement_query)

        print("Tables créées avec succès.")
        conn.commit()

    except Exception as e:
        print("Une erreur s'est produite :", e)

    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()

# Appeler la fonction
create_database_and_tables()
# Connexion à PostgreSQL
def create_database_and_tables():
    try:
        # Connexion à PostgreSQL (adapter les valeurs à votre configuration)
        conn = psycopg2.connect(
            dbname="postgres",  # La base initiale pour se connecter
            user="votre_utilisateur",
            password="votre_mot_de_passe",
            host="localhost",
            port="5432"
        )
        conn.autocommit = True
        cursor = conn.cursor()

        # Vérifier si la base de données existe déjà
        db_name = "ma_base_de_donnees"
        cursor.execute("SELECT 1 FROM pg_catalog.pg_database WHERE datname = %s", (db_name,))
        exists = cursor.fetchone()
        if not exists:
            # Création de la base de données
            cursor.execute(sql.SQL("CREATE DATABASE {}").format(sql.Identifier(db_name)))
            print(f"Base de données '{db_name}' créée avec succès.")
        else:
            print(f"La base de données '{db_name}' existe déjà.")
        
        # Connexion à la nouvelle base
        conn.close()
        conn = psycopg2.connect(
            dbname=db_name,
            user="votre_utilisateur",
            password="votre_mot_de_passe",
            host="localhost",
            port="5432"
        )
        cursor = conn.cursor()

        # Création des tables
        table_103_query = """
        CREATE TABLE IF NOT EXISTS table_103 (
            id SERIAL PRIMARY KEY,
            nom_fichier VARCHAR(255) NOT NULL,
            reference103 BIGINT NOT NULL,
            date_creation DATE NOT NULL,
            chemin_fichier TEXT NOT NULL,
            date_insertion TIMESTAMP DEFAULT NOW()
        );
        """
        table_910_query = """
        CREATE TABLE IF NOT EXISTS table_910 (
            id SERIAL PRIMARY KEY,
            nom_fichier VARCHAR(255) NOT NULL,
            reference910 BIGINT NOT NULL,
            date_creation DATE NOT NULL,
            chemin_fichier TEXT NOT NULL,
            date_insertion TIMESTAMP DEFAULT NOW()
        );
        """
        traitement_query = """
        CREATE TABLE IF NOT EXISTS traitement (
            id SERIAL PRIMARY KEY,
            reference103 INT REFERENCES table_103(id) ON DELETE CASCADE,
            reference910 INT REFERENCES table_910(id) ON DELETE CASCADE,
            statut VARCHAR(50) NOT NULL,
            date_traitement TIMESTAMP DEFAULT NOW()
        );
        """
        
        # Exécution des requêtes
        cursor.execute(table_103_query)
        cursor.execute(table_910_query)
        cursor.execute(traitement_query)

        print("Tables créées avec succès.")
        conn.commit()

    except Exception as e:
        print("Une erreur s'est produite :", e)

    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()

# Appeler la fonction
create_database_and_tables()

____________
import re
from datetime import datetime

def extraire_donnees_mt103(nom_fichier):
    # Extraction du nom de fichier uniquement
    nom_fichier_extrait = nom_fichier.split("/")[-1]  # On récupère le nom du fichier, sans le chemin

    # On divise le nom du fichier par le caractère '_'
    parties = nom_fichier_extrait.split('_')

    # Vérification que nous avons suffisamment de parties
    if len(parties) !=0:
        # Extraction des informations à partir des différentes parties du nom de fichier
        emetteur = parties[0]  # Exemple: XBFC
        reference103 = str(parties[4])  # Exemple: ER12345678998361

        # Le montant se trouve après 'NONREF', donc on prend la partie suivante (partie[6])
        # On exclut le texte NONREF et récupère la valeur correcte du montant
        #montant_str = parties[5]  # 'NONREF_800.'
        #montant_str = montant_str.split('_')[1].replace('.', '')  # On récupère le montant après NONREF et on nettoie le format
        montant = str(parties[6])  # Conversion en float

        devise = parties[7]  # Exemple: EUR
        sousdossier = parties[8]  # Exemple: ABCXD
        moisannee = parties[9][:6]  # Exemple: 1224 (mois + année)
       # jjmmaaaa = parties[9]  # Exemple: 201224 (jour + mois + année)
        #heureminute = parties[10].split('-')[1].split('.')[0]  # Exemple: 023457

        # Conversion de la date jjmmaaaa en objet datetime
        #date_creation = datetime.strptime(jjmmaaaa, "%d%m%Y")
        
        # Retourner les résultats sous forme de dictionnaire
        return {
            "emetteur": emetteur,
            "reference103": reference103,
            "montant": montant,
            "devise": devise,
            "sousdossier": sousdossier,
            "moisannee": moisannee,
            #"jjmmaaaa": jjmmaaaa,
            #"date_creation": date_creation,
           # "heureminute": heureminute
        }
    else:
        raise ValueError("Le nom de fichier ne correspond pas au format attendu.")

# Exemple d'utilisation avec le nom de fichier
nom_fichier = "data/1224/20122024/entrant/MT103/ABCXD/XBFC_SWIFT_E_MT103_ER12345678998361_NONREF_800._EUR_ABCXD_201224-023457.pdf"
donnees_mt103 = extraire_donnees_mt103(nom_fichier)

# Affichage des données extraites
for cle, valeur in donnees_mt103.items():
    print(f"{cle}: {valeur}")

________________
from sqlalchemy import create_engine, Column, String, Float
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from datetime import datetime

# Définition de la base et du modèle
Base = declarative_base()

class MT103(Base):
    __tablename__ = 'mt103'
    
    reference103 = Column(String, primary_key=True)
    emetteur = Column(String)
    montant = Column(Float)
    devise = Column(String)
    sousdossier = Column(String)
    moisannee = Column(String)

# Connexion à la base de données (ajustez selon votre configuration)
engine = create_engine('sqlite:///mt103.db')  # Par exemple pour SQLite, changez selon votre SGBD
Base.metadata.create_all(engine)

Session = sessionmaker(bind=engine)
session = Session()

def extraire_donnees_mt103(nom_fichier):
    # Extraction du nom de fichier uniquement
    nom_fichier_extrait = nom_fichier.split("/")[-1]  # On récupère le nom du fichier, sans le chemin

    # On divise le nom du fichier par le caractère '_'
    parties = nom_fichier_extrait.split('_')

    # Vérification que nous avons suffisamment de parties
    if len(parties) != 0:
        # Extraction des informations à partir des différentes parties du nom de fichier
        emetteur = parties[0]  # Exemple: XBFC
        reference103 = str(parties[4])  # Exemple: ER12345678998361
        montant = str(parties[6])  # Montant (exemple: '800')
        devise = parties[7]  # Exemple: EUR
        sousdossier = parties[8]  # Exemple: ABCXD
        moisannee = parties[9][:6]  # Exemple: 1224 (mois + année)
        
        # Retourner les résultats sous forme de dictionnaire
        return {
            "emetteur": emetteur,
            "reference103": reference103,
            "montant": float(montant),  # Convertir en float
            "devise": devise,
            "sousdossier": sousdossier,
            "moisannee": moisannee
        }
    else:
        raise ValueError("Le nom de fichier ne correspond pas au format attendu.")

def inserer_si_non_existe(nom_fichier):
    donnees_mt103 = extraire_donnees_mt103(nom_fichier)
    
    # Vérifier si la reference103 existe déjà dans la base de données
    reference_exists = session.query(MT103).filter(MT103.reference103 == donnees_mt103['reference103']).first()
    
    if reference_exists is None:
        # Insérer dans la table
        nouveau_mt103 = MT103(
            reference103=donnees_mt103['reference103'],
            emetteur=donnees_mt103['emetteur'],
            montant=donnees_mt103['montant'],
            devise=donnees_mt103['devise'],
            sousdossier=donnees_mt103['sousdossier'],
            moisannee=donnees_mt103['moisannee']
        )
        session.add(nouveau_mt103)
        session.commit()
        print(f"Enregistrement inséré pour la référence {donnees_mt103['reference103']}")
    else:
        print(f"La référence {donnees_mt103['reference103']} existe déjà dans la table.")

# Exemple d'utilisation avec le nom de fichier
nom_fichier = "data/1224/20122024/entrant/MT103/ABCXD/XBFC_SWIFT_E_MT103_ER12345678998361_NONREF_800._EUR_ABCXD_201224-023457.pdf"
inserer_si_non_existe(nom_fichier)



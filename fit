L'objectif est de traiter des fichiers SWIFT contenus dans deux dossiers : **MT103** et **MT910**. Ces dossiers contiennent des sous-dossiers organisés par dates, où se trouvent les fichiers au format PDF. Chaque fichier porte un nom qui inclut des informations importantes comme une référence unique, une date, un montant, une devise, etc.

### Étapes du traitement :

1. **Extraction des données :**
   - Parcourir les fichiers du dossier **MT103** et enregistrer leurs informations (comme le chemin du fichier, la date, la référence, le montant, la devise, etc.) dans une table appelée **MT103** dans une base de données PostgreSQL.
   - Faire de même avec les fichiers du dossier **MT910**, en enregistrant leurs informations dans une table appelée **MT910**.

2. **Comparaison des fichiers :**
   - Comparer les fichiers du dossier **MT103** avec ceux du dossier **MT910**, en utilisant la **référence unique** extraite des noms des fichiers.
   - Enregistrer le résultat de cette comparaison dans une table appelée **match**, qui contiendra :
     - La date de la comparaison.
     - La date des fichiers (extraite du nom).
     - Les références des fichiers (**MT103** et **MT910**).
     - Les chemins des fichiers.
     - Une indication si les références correspondent ("oui" si elles sont identiques, "non" sinon).

3. **Gestion des correspondances :**
   - Si un fichier de **MT103** a une correspondance dans **MT910** (même référence) pour la date du jour :
     - Copier les deux fichiers dans un répertoire spécifique appelé **dossiers_traiter**.
   - Si un fichier de **MT103** n'a pas de correspondance dans **MT910** pour la date du jour :
     - Vérifier dans les dossiers des jours suivants si une correspondance existe.
     - Si une correspondance est trouvée dans un jour ultérieur, traiter comme pour une correspondance classique (copier dans **dossiers_traiter**).
     - Si aucune correspondance n'est trouvée, laisser les fichiers dans leurs dossiers d'origine.

4. **Organisation quotidienne :**
   - Chaque jour, de nouveaux sous-dossiers sont créés dans les dossiers **MT103** et **MT910** pour les fichiers du jour (par exemple, pour le 10 décembre 2024, les sous-dossiers correspondants seront créés).

### Résumé des tables de la base de données :

- **Table MT103 :**  
  Contient des informations sur les fichiers du dossier MT103 :  
  - `url`, `moisannee`, `jjmmaaaa`, `dossier`, `sousdossier`, `reference103`, `montant`, `devise`, `emetteur`, `recepteur`, etc.  

- **Table MT910 :**  
  Contient des informations sur les fichiers du dossier MT910 :  
  - `url`, `moisannee`, `jjmmaaaa`, `reference910`, `montant`, `devise`, `emetteur`, `recepteur`, etc.  

- **Table match :**  
  Contient le résultat de la comparaison entre les fichiers MT103 et MT910 :  
  - `date_match` (date système de la comparaison), `jjmmaaaa`, `reference103`, `reference910`, `url103`, `url910`, `match` ("oui" ou "non").

Ce processus est automatisé avec un script Python, qui récupère les informations nécessaires, les enregistre dans les tables, effectue les comparaisons, et gère les fichiers en conséquence.


__________________________________
# Connexion à PostgreSQL
def create_database_and_tables():
    try:
        # Connexion à PostgreSQL (adapter les valeurs à votre configuration)
        conn = psycopg2.connect(
            dbname="postgres",  # La base initiale pour se connecter
            user="votre_utilisateur",
            password="votre_mot_de_passe",
            host="localhost",
            port="5432"
        )
        conn.autocommit = True
        cursor = conn.cursor()

        # Vérifier si la base de données existe déjà
        db_name = "ma_base_de_donnees"
        cursor.execute("SELECT 1 FROM pg_catalog.pg_database WHERE datname = %s", (db_name,))
        exists = cursor.fetchone()
        if not exists:
            # Création de la base de données
            cursor.execute(sql.SQL("CREATE DATABASE {}").format(sql.Identifier(db_name)))
            print(f"Base de données '{db_name}' créée avec succès.")
        else:
            print(f"La base de données '{db_name}' existe déjà.")
        
        # Connexion à la nouvelle base
        conn.close()
        conn = psycopg2.connect(
            dbname=db_name,
            user="votre_utilisateur",
            password="votre_mot_de_passe",
            host="localhost",
            port="5432"
        )
        cursor = conn.cursor()

        # Création des tables
        table_103_query = """
        CREATE TABLE IF NOT EXISTS table_103 (
            id SERIAL PRIMARY KEY,
            nom_fichier VARCHAR(255) NOT NULL,
            reference103 BIGINT NOT NULL,
            date_creation DATE NOT NULL,
            chemin_fichier TEXT NOT NULL,
            date_insertion TIMESTAMP DEFAULT NOW()
        );
        """
        table_910_query = """
        CREATE TABLE IF NOT EXISTS table_910 (
            id SERIAL PRIMARY KEY,
            nom_fichier VARCHAR(255) NOT NULL,
            reference910 BIGINT NOT NULL,
            date_creation DATE NOT NULL,
            chemin_fichier TEXT NOT NULL,
            date_insertion TIMESTAMP DEFAULT NOW()
        );
        """
        traitement_query = """
        CREATE TABLE IF NOT EXISTS traitement (
            id SERIAL PRIMARY KEY,
            reference103 INT REFERENCES table_103(id) ON DELETE CASCADE,
            reference910 INT REFERENCES table_910(id) ON DELETE CASCADE,
            statut VARCHAR(50) NOT NULL,
            date_traitement TIMESTAMP DEFAULT NOW()
        );
        """
        
        # Exécution des requêtes
        cursor.execute(table_103_query)
        cursor.execute(table_910_query)
        cursor.execute(traitement_query)

        print("Tables créées avec succès.")
        conn.commit()

    except Exception as e:
        print("Une erreur s'est produite :", e)

    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()

# Appeler la fonction
create_database_and_tables()
# Connexion à PostgreSQL
def create_database_and_tables():
    try:
        # Connexion à PostgreSQL (adapter les valeurs à votre configuration)
        conn = psycopg2.connect(
            dbname="postgres",  # La base initiale pour se connecter
            user="votre_utilisateur",
            password="votre_mot_de_passe",
            host="localhost",
            port="5432"
        )
        conn.autocommit = True
        cursor = conn.cursor()

        # Vérifier si la base de données existe déjà
        db_name = "ma_base_de_donnees"
        cursor.execute("SELECT 1 FROM pg_catalog.pg_database WHERE datname = %s", (db_name,))
        exists = cursor.fetchone()
        if not exists:
            # Création de la base de données
            cursor.execute(sql.SQL("CREATE DATABASE {}").format(sql.Identifier(db_name)))
            print(f"Base de données '{db_name}' créée avec succès.")
        else:
            print(f"La base de données '{db_name}' existe déjà.")
        
        # Connexion à la nouvelle base
        conn.close()
        conn = psycopg2.connect(
            dbname=db_name,
            user="votre_utilisateur",
            password="votre_mot_de_passe",
            host="localhost",
            port="5432"
        )
        cursor = conn.cursor()

        # Création des tables
        table_103_query = """
        CREATE TABLE IF NOT EXISTS table_103 (
            id SERIAL PRIMARY KEY,
            nom_fichier VARCHAR(255) NOT NULL,
            reference103 BIGINT NOT NULL,
            date_creation DATE NOT NULL,
            chemin_fichier TEXT NOT NULL,
            date_insertion TIMESTAMP DEFAULT NOW()
        );
        """
        table_910_query = """
        CREATE TABLE IF NOT EXISTS table_910 (
            id SERIAL PRIMARY KEY,
            nom_fichier VARCHAR(255) NOT NULL,
            reference910 BIGINT NOT NULL,
            date_creation DATE NOT NULL,
            chemin_fichier TEXT NOT NULL,
            date_insertion TIMESTAMP DEFAULT NOW()
        );
        """
        traitement_query = """
        CREATE TABLE IF NOT EXISTS traitement (
            id SERIAL PRIMARY KEY,
            reference103 INT REFERENCES table_103(id) ON DELETE CASCADE,
            reference910 INT REFERENCES table_910(id) ON DELETE CASCADE,
            statut VARCHAR(50) NOT NULL,
            date_traitement TIMESTAMP DEFAULT NOW()
        );
        """
        
        # Exécution des requêtes
        cursor.execute(table_103_query)
        cursor.execute(table_910_query)
        cursor.execute(traitement_query)

        print("Tables créées avec succès.")
        conn.commit()

    except Exception as e:
        print("Une erreur s'est produite :", e)

    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()

# Appeler la fonction
create_database_and_tables()
